{"version":3,"sources":["request_test.js"],"names":["test","cb","options","baseUrl","url","timeout","headers","request","get","err","res","body","t","fail","statusCode","JSON","parse","is","login","end"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA;AACAA,cAAKC,EAAL,CAAQ,kBAAR,EAA4B,aAAK;;AAE7B;AACA,QAAMC,UAAU;AACZC,iBAAS,wBADG;AAEZC,aAAK,gBAFO;AAGZ;AACAC,iBAAS,IAAI,IAJD;AAKZ;AACAC,iBAAS;AACL,0BAAc;AADT;AANG,KAAhB;;AAWA;AACAC,sBAAQC,GAAR,CAAYN,OAAZ,EAAqB,UAACO,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrC,YAAIF,GAAJ,EAASG,EAAEC,IAAF,CAAO,UAAP;;AAET,YAAIH,OAAOA,IAAII,UAAJ,KAAmB,GAA9B,EAAmC;AAC/BH,mBAAOI,KAAKC,KAAL,CAAWL,IAAX,CAAP;AACAC,cAAEK,EAAF,CAAKN,KAAKO,KAAV,EAAiB,SAAjB;AACH,SAHD,MAGO;AACHN,cAAEC,IAAF,CAAO,cAAP;AACH;;AAED;AACAD,UAAEO,GAAF;AACH,KAZD;AAaH,CA5BD","file":"request_test.js","sourcesContent":["import test from 'ava';\nimport request from 'request';\n\n// test.cb() 回调函数形式测试异步代码，异步结束调用 t.end()\ntest.cb('http api testing', t => {\n\n    // 基于 Request API 创建 http 请求的配置\n    const options = {\n        baseUrl: 'https://api.github.com',\n        url: '/users/Barrior',\n        // 请求超时时间\n        timeout: 5 * 1000,\n        // http 请求头部，模拟得跟浏览器越像越好，不然被服务器处理成爬虫或者其他就可能得不到我们想要的响应\n        headers: {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'\n        }\n    };\n\n    // Request API 发送 GET 请求\n    request.get(options, (err, res, body) => {\n        if (err) t.fail('服务器响应超时！');\n\n        if (res && res.statusCode === 200) {\n            body = JSON.parse(body);\n            t.is(body.login, 'Barrior');\n        } else {\n            t.fail('无响应内容或状态码错误！');\n        }\n        \n        // 异步结束\n        t.end();\n    });\n});\n"]}