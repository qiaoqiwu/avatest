'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Todo = function (_React$Component) {
    _inherits(Todo, _React$Component);

    function Todo(props) {
        _classCallCheck(this, Todo);

        var _this = _possibleConstructorReturn(this, (Todo.__proto__ || Object.getPrototypeOf(Todo)).call(this, props));

        _this.state = {
            names: props.names || []
        };
        return _this;
    }

    _createClass(Todo, [{
        key: 'add',
        value: function add() {
            var elem = this.refs.textarea;
            var name = elem.value;
            if (name) {
                elem.value = '';
                this.state.names.push(name);
                this.setState({});
            } else {
                elem.focus();
            }
        }
    }, {
        key: 'del',
        value: function del(i) {
            this.state.names.splice(i, 1);
            this.setState({});
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            return _react2.default.createElement(
                'div',
                { className: 'todo' },
                _react2.default.createElement(
                    'div',
                    null,
                    _react2.default.createElement('textarea', {
                        cols: '30',
                        rows: '10',
                        ref: 'textarea',
                        placeholder: 'Type member name' }),
                    _react2.default.createElement(
                        'button',
                        {
                            className: 'btn',
                            onClick: this.add.bind(this) },
                        'Add member'
                    )
                ),
                _react2.default.createElement(
                    'ul',
                    null,
                    this.state.names.map(function (name, i) {
                        return _react2.default.createElement(
                            'li',
                            { key: i },
                            _react2.default.createElement(
                                'span',
                                null,
                                'Member name: ',
                                name
                            ),
                            _react2.default.createElement(
                                'button',
                                {
                                    className: 'btn',
                                    onClick: _this2.del.bind(_this2, i) },
                                'Remove member'
                            )
                        );
                    })
                )
            );
        }
    }]);

    return Todo;
}(_react2.default.Component);

exports.default = Todo;
//# sourceMappingURL=/data/wuqiaoqi/avatest/node_modules/.cache/ava/b1f35dda78b789cb2eefb61cc5c7b961.js.map